{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tui-typer-tutor","text":"<p>Fork of kraanzu/termtyper with a focus on special characters. Inspired by climech/typing-practice.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p><code>poetry add</code></p> </li> <li> <p>\u2026</p> <pre><code>import\n\n# &lt; TODO: Add example code here &gt;\n</code></pre> </li> <li> <p>\u2026</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>For more example code, see the scripts directory or the tests.</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>rename to tui-typer-tutor to avoid confusion with terminal-typing-tutor</li> <li>initialize with calcipy template</li> <li>Add <code>-q</code> flag for quiet mode (closes #12)</li> <li><code>Time/Word</code> progress</li> <li>dim untyped-characters</li> <li>Add g and G keybindings for <code>getting started</code></li> <li>Add mode change menu</li> <li>Add timeout menu</li> <li>Add timer mode</li> <li>Add shortcuts for numbers and punctuations</li> <li>Escape to close floating menu + live change display</li> <li>Better config</li> <li>Toggle details for race bar</li> <li>New word generator</li> <li>better parser</li> <li>Bar theme change on the fly!</li> <li>Add multiple-themed progress bars</li> <li>Add size change menu</li> <li>UI improvements</li> <li>monkeytype typing UI</li> <li>Add MinimalScrollView</li> <li>Add main screen menu</li> <li>better option menu</li> <li>Add getting started menu and remove quit button</li> <li>add <code>ctrl+l</code> for sentence deletetion (for #10)</li> <li>Update lockfile</li> <li>Add <code>ctrl+w</code> for deleting a word for #1</li> <li>Add key-bindings for navigation (closes #3)</li> <li>Add vim/arrow keys keybindings in main menu</li> <li>Update speed measurement for different size paragraphs</li> <li>Add keypress sounds</li> <li>Add min burst</li> <li>Add Difficulty mode</li> <li>Add Confidence mode</li> <li>Add typing results + racebar sync fix</li> <li>Now race bar moves with the screen</li> <li>Read and Write settings data from .ini</li> <li>add Chomsky :)</li> <li>Improve Settings + Refactor</li> <li>Add Number scroll + Some Improvements</li> <li>Add parser</li> <li>Improvements +  More Widgets</li> <li>Improve button + Main Menu layout added</li> <li>Add Button class</li> <li>Add Screen Skeleton code + RaceBar</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>toggle numbers and punctuations not working  (closes #42)</li> <li>Module not found (for #19)</li> <li> <p>100% accuracy</p> </li> <li>AUR package</li> <li>keypress_sound setting not working!</li> <li>unclear instruction in help menu (closes #18)</li> <li>Update <code>discord</code> link</li> <li>Timer not stopping on finish</li> <li>caret setting not working</li> <li>Menu option fallback</li> <li>Setting missing from menu + some code refactor</li> <li>incorrect bar theme menu default value</li> <li>App crash on pressing <code>Esc</code> in main menu</li> <li>Bar reset on completing typing</li> <li>Broken live changes on race bar</li> <li>Update help menu to new keybindings</li> <li>Bar not resetting after mode change</li> <li>broken racebar render</li> <li>remove punctuation words from text file</li> <li>paragraph size change + code refactor</li> <li>playsound</li> <li>Vertical alignment of remarks on completion</li> <li>Keypress sound not working issue #4</li> <li><code>cursor buddy speed</code> not changing</li> <li>RaceBar remarks not visible on completion</li> <li>Tab Reset Bug</li> <li>Sound location error</li> <li>make compatible with python 3.9</li> <li>Sound location error</li> <li>Race bar not resetting</li> <li>escape fix for typing screen + remarks on finishing</li> <li>Typos</li> <li>race bar not responding on fail</li> <li>classmethod clash</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>run automated tooling</li> <li>instance re-use</li> <li>Add banner class</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO Add example code here &gt; 2023-06-24 docs/README.md:14 TODO Show an example (screenshots, terminal recording, etc.) &gt; \u2013&gt; 2023-06-24 docs/README.md:21 <p>Found code tags for TODO (2)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/tui-typer-tutor.git\ncd tui-typer-tutor\npoetry install --sync\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":""},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types</li> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> <li>Scopes</li> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> <li>Tips</li> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines</li> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> <li>How to write a good commit message</li> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones</li> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> Research <ul> <li>[Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>Github\u2019s Advice on Github</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)</li> <li>Bash Tab-Completion Snippet</li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides</li> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>tui_typer_tutor</li> </ul>"},{"location":"reference/tui_typer_tutor/","title":"tui_typer_tutor","text":"<p>tui_typer_tutor.</p>"}]}