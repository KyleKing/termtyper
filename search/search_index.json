{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tui-typer-tutor","text":"<p>Uncomplicated terminal typing practice.</p> <p>Fork of <code>kraanzu/termtyper</code> with a focus on special characters. Inspired by <code>climech/typing-practice</code> and <code>justinsgithub/terminal-typing-tutor</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install with <code>pipx</code></p> <pre><code>pipx install tui-typer-tutor\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Launch a typing session with the default text:</p> <pre><code>ttt\n</code></pre> <p>Or specify custom files with:</p> <pre><code>ttt --seed-file='./any-file.txt'\n</code></pre> <p>To uninstall run:</p> <pre><code>ttt --uninstall &amp;&amp; pipx uninstall tui-typer-tutor\n</code></pre>"},{"location":"#keys","title":"Keys","text":"<p>This app supports a few unicode characters when found in the seed file:</p> <ul> <li>tab: <code>\u2192</code></li> <li>shift+tab: <code>\u2190</code></li> <li>enter/return: <code>\u23ce</code></li> <li>escape: <code>\u241b</code></li> </ul> <p>All supported characters are documented here. <code>Ctrl</code> key combinations aren\u2019t yet supported and appear as an unknown character.</p>"},{"location":"#seed-file","title":"Seed File","text":"<p>The algorithm for generating the expected text is:</p> <ol> <li>Load each line of the seed file</li> <li>Reorder randomly (keeping each line of text together)</li> <li>Join without a delimeter keeping any leading white space per line</li> </ol> <p>The default seed file is here: ./tui_typer_tutor/core/seed_data.txt</p> <p>Ideas for better seed text generation are welcome!</p>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>expand default seed data</li> <li>keep text centered on many deletes</li> <li>add VHS demo</li> <li>switch to arguably for the CLI</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>cleanup demo tape</li> <li>ignore bound keys from metrics</li> </ul>"},{"location":"docs/CHANGELOG/#101-2023-06-27","title":"1.0.1 (2023-06-27)","text":""},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>add missing platformdirs dependency</li> </ul>"},{"location":"docs/CHANGELOG/#100-2023-06-27","title":"1.0.0 (2023-06-27)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>better handle edge cases</li> <li>add user configurable \u2013seed-file</li> <li>add uninstall and test metrics</li> <li>implement save metrics</li> <li>load seed data from default file</li> <li>use the actual character width per Key when displaying</li> <li>implement an MVP of the TUI</li> <li>merge runnable version of termtyper</li> <li>rename to tui-typer-tutor to avoid confusion with terminal-typing-tutor</li> <li>initialize with calcipy template</li> </ul>"},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>center the typed text</li> <li>catch at the end of the input</li> <li>show whitespace as a block for the fill color to work</li> <li>remove accumulator for multi-width keys</li> <li>drop Vim bindings and being enforcing single character width Keys</li> <li>test the UI and resolve minor bugs</li> <li>correctly parse the adjusted index</li> <li>restore latest textual</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>move whitespace logic to the GUI</li> <li>try to</li> <li>initial support for multi-char text &amp; remove focus toggle</li> <li>delete invoke task logic and use argparse like tail-jsonl</li> <li>remove legacy code with event references</li> <li>remove pre-ttt code</li> <li>remove sounds</li> <li>run automated tooling</li> </ul>"},{"location":"docs/CHANGELOG/#000-2023-06-24","title":"0.0.0 (2023-06-24)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>Add <code>-q</code> flag for quiet mode (closes #12)</li> <li><code>Time/Word</code> progress</li> <li>dim untyped-characters</li> <li>Add g and G keybindings for <code>getting started</code></li> <li>Add mode change menu</li> <li>Add timeout menu</li> <li>Add timer mode</li> <li>Add shortcuts for numbers and punctuations</li> <li>Escape to close floating menu + live change display</li> <li>Better config</li> <li>Toggle details for race bar</li> <li>New word generator</li> <li>better parser</li> <li>Bar theme change on the fly!</li> <li>Add multiple-themed progress bars</li> <li>Add size change menu</li> <li>UI improvements</li> <li>monkeytype typing UI</li> <li>Add MinimalScrollView</li> <li>Add main screen menu</li> <li>better option menu</li> <li>Add getting started menu and remove quit button</li> <li>add <code>ctrl+l</code> for sentence deletetion (for #10)</li> <li>Update lockfile</li> <li>Add <code>ctrl+w</code> for deleting a word for #1</li> <li>Add key-bindings for navigation (closes #3)</li> <li>Add vim/arrow keys keybindings in main menu</li> <li>Update speed measurement for different size paragraphs</li> <li>Add keypress sounds</li> <li>Add min burst</li> <li>Add Difficulty mode</li> <li>Add Confidence mode</li> <li>Add typing results + racebar sync fix</li> <li>Now race bar moves with the screen</li> <li>Read and Write settings data from .ini</li> <li>add Chomsky :)</li> <li>Improve Settings + Refactor</li> <li>Add Number scroll + Some Improvements</li> <li>Add parser</li> <li>Improvements +  More Widgets</li> <li>Improve button + Main Menu layout added</li> <li>Add Button class</li> <li>Add Screen Skeleton code + RaceBar</li> </ul>"},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>toggle numbers and punctuations not working  (closes #42)</li> <li>Module not found (for #19)</li> <li> <p>100% accuracy</p> </li> <li>AUR package</li> <li>keypress_sound setting not working!</li> <li>unclear instruction in help menu (closes #18)</li> <li>Update <code>discord</code> link</li> <li>Timer not stopping on finish</li> <li>caret setting not working</li> <li>Menu option fallback</li> <li>Setting missing from menu + some code refactor</li> <li>incorrect bar theme menu default value</li> <li>App crash on pressing <code>Esc</code> in main menu</li> <li>Bar reset on completing typing</li> <li>Broken live changes on race bar</li> <li>Update help menu to new keybindings</li> <li>Bar not resetting after mode change</li> <li>broken racebar render</li> <li>remove punctuation words from text file</li> <li>paragraph size change + code refactor</li> <li>playsound</li> <li>Vertical alignment of remarks on completion</li> <li>Keypress sound not working issue #4</li> <li><code>cursor buddy speed</code> not changing</li> <li>RaceBar remarks not visible on completion</li> <li>Tab Reset Bug</li> <li>Sound location error</li> <li>make compatible with python 3.9</li> <li>Sound location error</li> <li>Race bar not resetting</li> <li>escape fix for typing screen + remarks on finishing</li> <li>Typos</li> <li>race bar not responding on fail</li> <li>classmethod clash</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>instance re-use</li> <li>Add banner class</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File FIXME Typing this last space should exit, but it fails. Using Ctrl+q instead 2023-06-29 .github/assets/demo.tape:77 PLANNED Improve the Help Screen style 2023-06-28 tui_typer_tutor/screens/help.py:23 TODO Print out or display a success message on completion! 2023-06-28 tui_typer_tutor/screens/main.py:75 TODO Support more customization 2023-06-27 tui_typer_tutor/screens/main.py:92 <p>Found code tags for FIXME (1), TODO (2), PLANNED (1)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/tui-typer-tutor.git\ncd tui-typer-tutor\npoetry install --sync\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>tui_typer_tutor/__init__.py</code> 6 0 0 100.0% <code>tui_typer_tutor/app/__init__.py</code> 0 0 0 100.0% <code>tui_typer_tutor/app/ttt.py</code> 12 12 0 0.0% <code>tui_typer_tutor/constants/__init__.py</code> 1 0 0 100.0% <code>tui_typer_tutor/constants/display_to_textual.py</code> 5 0 0 100.0% <code>tui_typer_tutor/core/__init__.py</code> 0 0 0 100.0% <code>tui_typer_tutor/core/config.py</code> 14 14 0 0.0% <code>tui_typer_tutor/core/metrics.py</code> 39 0 0 98.3% <code>tui_typer_tutor/core/scrolled_labels.py</code> 0 0 0 100.0% <code>tui_typer_tutor/core/seed_data.py</code> 9 0 0 100.0% <code>tui_typer_tutor/core/typing.py</code> 44 1 0 96.6% <code>tui_typer_tutor/core/uninstall.py</code> 18 0 0 96.2% <code>tui_typer_tutor/screens/__init__.py</code> 0 0 0 100.0% <code>tui_typer_tutor/screens/help.py</code> 14 14 0 0.0% <code>tui_typer_tutor/screens/main.py</code> 74 74 0 0.0% <code>tui_typer_tutor/scripts.py</code> 21 21 0 0.0% Totals 257 136 0 48.7% <p>Generated on: 2023-07-07</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types</li> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> <li>Scopes</li> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> <li>Tips</li> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines</li> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> <li>How to write a good commit message</li> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones</li> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> Research <ul> <li>[Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>Github\u2019s Advice on Github</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)</li> <li>Bash Tab-Completion Snippet</li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides</li> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/tui_typer_tutor/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>tui_typer_tutor<ul> <li>app<ul> <li>ttt</li> </ul> </li> <li>constants<ul> <li>display_to_textual</li> </ul> </li> <li>core<ul> <li>config</li> <li>metrics</li> <li>scrolled_labels</li> <li>seed_data</li> <li>typing</li> <li>uninstall</li> </ul> </li> <li>screens<ul> <li>help</li> <li>main</li> </ul> </li> <li>scripts</li> </ul> </li> </ul>"},{"location":"reference/tui_typer_tutor/","title":"tui_typer_tutor","text":"<p>tui_typer_tutor.</p>"},{"location":"reference/tui_typer_tutor/scripts/","title":"scripts","text":"<p>Start the command line program.</p>"},{"location":"reference/tui_typer_tutor/scripts/#tui_typer_tutor.scripts-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/scripts/#tui_typer_tutor.scripts-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/scripts/#tui_typer_tutor.scripts.parse_ttt_args","title":"parse_ttt_args","text":"<pre><code>parse_ttt_args(*, seed_file='', version=False, uninstall=False)\n</code></pre> <p>Practice Touch Typing in your terminal.</p> PARAMETER DESCRIPTION <code>seed_file</code> <p>Optional path to seed file used for generating the prompt.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>Show program\u2019s version number and exit.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>False</code> </p> <code>uninstall</code> <p>Remove all files created by tui-typer-tutor.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>False</code> </p> Source code in <code>tui_typer_tutor/scripts.py</code> <pre><code>@arguably.command\ndef parse_ttt_args(\n*,\nseed_file: str = '',\nversion: bool | None = False,\nuninstall: bool | None = False,\n) -&gt; None:\n\"\"\"Practice Touch Typing in your terminal.\n    Args:\n        seed_file: Optional path to seed file used for generating the prompt.\n        version: Show program's version number and exit.\n        uninstall: Remove all files created by tui-typer-tutor.\n    \"\"\"\nif version:\nlogger.text('Version', pkg_name=__pkg_name__, version=__version__)\nelif uninstall:\nrun_uninstall()\nelse:\nconfig = get_config()\nif seed_file:\nconfig.seed_file = Path(seed_file)\nTuiTyperTutor().run()\n</code></pre>"},{"location":"reference/tui_typer_tutor/scripts/#tui_typer_tutor.scripts.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>CLI Entrypoint.</p> Source code in <code>tui_typer_tutor/scripts.py</code> <pre><code>@beartype\ndef start() -&gt; None:\n\"\"\"CLI Entrypoint.\"\"\"\narguably.run()\n</code></pre>"},{"location":"reference/tui_typer_tutor/app/","title":"app","text":""},{"location":"reference/tui_typer_tutor/app/ttt/","title":"ttt","text":"<p>Main application.</p>"},{"location":"reference/tui_typer_tutor/app/ttt/#tui_typer_tutor.app.ttt-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/app/ttt/#tui_typer_tutor.app.ttt.TuiTyperTutor","title":"TuiTyperTutor","text":"<p>         Bases: <code>App[None]</code></p> <p>Main Application.</p> Source code in <code>tui_typer_tutor/app/ttt.py</code> <pre><code>class TuiTyperTutor(App[None]):\n\"\"\"Main Application.\"\"\"\nTITLE = 'TUI Typer Tutor'\nBINDINGS: ClassVar[list[Binding]] = [  # type: ignore[assignment]\nBinding('ctrl+backslash', 'show_help', 'Help'),\n]\ndef on_mount(self) -&gt; None:\n\"\"\"Set up the application after the DOM is ready.\"\"\"\nself.push_screen(Main())\ndef action_show_help(self) -&gt; None:\n\"\"\"Action to display the help dialog.\"\"\"\nself.push_screen(Help())\n</code></pre>"},{"location":"reference/tui_typer_tutor/app/ttt/#tui_typer_tutor.app.ttt.TuiTyperTutor-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/app/ttt/#tui_typer_tutor.app.ttt.TuiTyperTutor.action_show_help","title":"action_show_help","text":"<pre><code>action_show_help()\n</code></pre> <p>Action to display the help dialog.</p> Source code in <code>tui_typer_tutor/app/ttt.py</code> <pre><code>def action_show_help(self) -&gt; None:\n\"\"\"Action to display the help dialog.\"\"\"\nself.push_screen(Help())\n</code></pre>"},{"location":"reference/tui_typer_tutor/app/ttt/#tui_typer_tutor.app.ttt.TuiTyperTutor.on_mount","title":"on_mount","text":"<pre><code>on_mount()\n</code></pre> <p>Set up the application after the DOM is ready.</p> Source code in <code>tui_typer_tutor/app/ttt.py</code> <pre><code>def on_mount(self) -&gt; None:\n\"\"\"Set up the application after the DOM is ready.\"\"\"\nself.push_screen(Main())\n</code></pre>"},{"location":"reference/tui_typer_tutor/constants/","title":"constants","text":""},{"location":"reference/tui_typer_tutor/constants/#tui_typer_tutor.constants-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/constants/display_to_textual/","title":"display_to_textual","text":"<p>Display Character to Textual Key Map.</p>"},{"location":"reference/tui_typer_tutor/constants/display_to_textual/#tui_typer_tutor.constants.display_to_textual-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/constants/display_to_textual/#tui_typer_tutor.constants.display_to_textual.DISPLAY_TO_TEXTUAL","title":"DISPLAY_TO_TEXTUAL  <code>module-attribute</code>","text":"<pre><code>DISPLAY_TO_TEXTUAL = bidict({None: _special_keys, None: dict(zip(ascii_letters, ascii_letters, strict=True)), None: dict(zip(digits, digits, strict=True))})\n</code></pre> <p>Bi-directional mapping of Display Characters to Textual Bindings.</p>"},{"location":"reference/tui_typer_tutor/core/","title":"core","text":""},{"location":"reference/tui_typer_tutor/core/config/","title":"config","text":"<p>Config.</p>"},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config.DEFAULT_SEED_FILE","title":"DEFAULT_SEED_FILE  <code>module-attribute</code>","text":"<pre><code>DEFAULT_SEED_FILE = Path(__file__).parent / 'seed_data.txt'\n</code></pre> <p>Default seed file if not specified.</p>"},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config.Config","title":"Config","text":"<p>         Bases: <code>BaseSettings</code></p> <p>Application config.</p> Source code in <code>tui_typer_tutor/core/config.py</code> <pre><code>class Config(BaseSettings):\n\"\"\"Application config.\"\"\"\nseed_file: Path = DEFAULT_SEED_FILE\nclass Config:\n\"\"\"Extended Configuration.\"\"\"\nenv_prefix = 'TYPER_'\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config.Config-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config.Config.Config","title":"Config","text":"<p>Extended Configuration.</p> Source code in <code>tui_typer_tutor/core/config.py</code> <pre><code>class Config:\n\"\"\"Extended Configuration.\"\"\"\nenv_prefix = 'TYPER_'\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/config/#tui_typer_tutor.core.config.get_config","title":"get_config  <code>cached</code>","text":"<pre><code>get_config()\n</code></pre> <p>Retrieve the application config.</p> Source code in <code>tui_typer_tutor/core/config.py</code> <pre><code>@lru_cache(maxsize=1)\n@beartype\ndef get_config() -&gt; Config:\n\"\"\"Retrieve the application config.\"\"\"\nreturn Config()\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/metrics/","title":"metrics","text":"<p>Manage Metrics.</p>"},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.SessionMetrics","title":"SessionMetrics","text":"<p>         Bases: <code>BaseModel</code></p> <p>Session metrics.</p> Source code in <code>tui_typer_tutor/core/metrics.py</code> <pre><code>class SessionMetrics(BaseModel):\n\"\"\"Session metrics.\"\"\"\nfilename: str\nsession_start: datetime\nsession_end: datetime | None = None\ntyped_correct: int = 0\ntyped_incorrect: int = 0\n@classmethod\ndef from_filename(cls, filename: str) -&gt; 'SessionMetrics':  # noqa: RBT002\n\"\"\"Initialize Metrics based on the filename.\"\"\"\nreturn cls(filename=filename, session_start=utcnow())\ndef end_session(self, keys: Keys) -&gt; 'SessionMetrics':  # noqa: RBT002\n\"\"\"Update the typed counters based on `Keys`.\"\"\"\nself.session_end = utcnow()\nfor key in keys.typed_all:\nif key.was_correct:\nself.typed_correct += 1\nelif key.expected:\nself.typed_incorrect += 1\nreturn self\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.SessionMetrics-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.SessionMetrics.end_session","title":"end_session","text":"<pre><code>end_session(keys)\n</code></pre> <p>Update the typed counters based on <code>Keys</code>.</p> Source code in <code>tui_typer_tutor/core/metrics.py</code> <pre><code>def end_session(self, keys: Keys) -&gt; 'SessionMetrics':  # noqa: RBT002\n\"\"\"Update the typed counters based on `Keys`.\"\"\"\nself.session_end = utcnow()\nfor key in keys.typed_all:\nif key.was_correct:\nself.typed_correct += 1\nelif key.expected:\nself.typed_incorrect += 1\nreturn self\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.SessionMetrics.from_filename","title":"from_filename  <code>classmethod</code>","text":"<pre><code>from_filename(filename)\n</code></pre> <p>Initialize Metrics based on the filename.</p> Source code in <code>tui_typer_tutor/core/metrics.py</code> <pre><code>@classmethod\ndef from_filename(cls, filename: str) -&gt; 'SessionMetrics':  # noqa: RBT002\n\"\"\"Initialize Metrics based on the filename.\"\"\"\nreturn cls(filename=filename, session_start=utcnow())\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.append_csv","title":"append_csv","text":"<pre><code>append_csv(metrics)\n</code></pre> <p>Write metrics to the global CSV.</p> Source code in <code>tui_typer_tutor/core/metrics.py</code> <pre><code>@beartype\ndef append_csv(metrics: SessionMetrics) -&gt; None:\n\"\"\"Write metrics to the global CSV.\"\"\"\ncsv_path = get_cache_dir() / 'metrics.csv'\ncsv_columns = ['filename', 'session_start', 'session_end', 'typed_correct', 'typed_incorrect']\nif not csv_path.is_file():\ncsv_path.parent.mkdir(exist_ok=True, parents=True)\nwith csv_path.open(mode='w', newline='', encoding='utf-8') as _f:\ncsv.writer(_f).writerow(csv_columns)  # nosemgrep\nser_metrics = metrics.dict()\nmetrics_row = [ser_metrics[_c] for _c in csv_columns]\nwith csv_path.open('a', newline='', encoding='utf-8') as _f:\ncsv.writer(_f).writerow(metrics_row)  # nosemgrep\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/metrics/#tui_typer_tutor.core.metrics.utcnow","title":"utcnow","text":"<pre><code>utcnow()\n</code></pre> <p>Return the current time in UTC.</p> Source code in <code>tui_typer_tutor/core/metrics.py</code> <pre><code>@beartype\ndef utcnow() -&gt; datetime:\n\"\"\"Return the current time in UTC.\"\"\"\nreturn datetime.now(tz=ZoneInfo('UTC'))\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/scrolled_labels/","title":"scrolled_labels","text":"<p>Support horizontal scrolling of labels.</p>"},{"location":"reference/tui_typer_tutor/core/seed_data/","title":"seed_data","text":"<p>Load Seed Data.</p>"},{"location":"reference/tui_typer_tutor/core/seed_data/#tui_typer_tutor.core.seed_data-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/seed_data/#tui_typer_tutor.core.seed_data-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/core/seed_data/#tui_typer_tutor.core.seed_data-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/seed_data/#tui_typer_tutor.core.seed_data.load_seed_data","title":"load_seed_data","text":"<pre><code>load_seed_data(seed_text)\n</code></pre> <p>Load Seed Data in Vim format.</p> Source code in <code>tui_typer_tutor/core/seed_data.py</code> <pre><code>@beartype\ndef load_seed_data(seed_text: str) -&gt; list[ExpectedKey]:\n\"\"\"Load Seed Data in Vim format.\"\"\"\ngrouped_keys = [\n[ExpectedKey(textual=DISPLAY_TO_TEXTUAL[token]) for token in line.rstrip()]\nfor line in seed_text.split('\\n')\nif line.strip()\n]\nrandom.shuffle(grouped_keys)  # noqa: DUO102\nreturn [_k for _keys in grouped_keys for _k in _keys]\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/","title":"typing","text":"<p>Typing Logic.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.AtEndOfExpectedError","title":"AtEndOfExpectedError","text":"<p>         Bases: <code>Exception</code></p> <p>Reached end of the expected keys.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>class AtEndOfExpectedError(Exception):\n\"\"\"Reached end of the expected keys.\"\"\"\n...\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.ExpectedKey","title":"ExpectedKey","text":"<p>         Bases: <code>BaseModel</code></p> <p>Expected Key.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>class ExpectedKey(BaseModel):\n\"\"\"Expected Key.\"\"\"\ntextual: str\n\"\"\"Textual Key Name.\"\"\"\n@property\ndef text(self) -&gt; str:\n\"\"\"Displayed text.\"\"\"\nreturn DISPLAY_TO_TEXTUAL.inverse.get(self.textual) or UNKNOWN\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.ExpectedKey-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.ExpectedKey.text","title":"text  <code>property</code>","text":"<pre><code>text: str\n</code></pre> <p>Displayed text.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.ExpectedKey.textual","title":"textual  <code>instance-attribute</code>","text":"<pre><code>textual: str\n</code></pre> <p>Textual Key Name.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys","title":"Keys","text":"<p>         Bases: <code>BaseModel</code></p> <p>Key Model.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>class Keys(BaseModel):\n\"\"\"Key Model.\"\"\"\nexpected: list[ExpectedKey] = Field(default_factory=list)\n\"\"\"The expected keys for practice.\"\"\"\ntyped_all: list[TypedKey] = Field(default_factory=list)\n\"\"\"Append-only list of typed keys.\"\"\"\ntyped: list[TypedKey] = Field(default_factory=list)\n\"\"\"Only tracks non-deleted typed keys.\"\"\"\nlast_was_delete: bool = False\n\"\"\"Indicate if last operation was a delete.\"\"\"\n@beartype\ndef store(self, *, key: TypedKey, is_delete: bool) -&gt; None:\n\"\"\"Store a new typed key.\"\"\"\nself.typed_all.append(key)\nself.last_was_delete = is_delete\nif not is_delete:\nself.typed.append(key)\nelif self.typed:\nself.typed = self.typed[:-1]\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys.expected","title":"expected  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expected: list[ExpectedKey] = Field(default_factory=list)\n</code></pre> <p>The expected keys for practice.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys.last_was_delete","title":"last_was_delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>last_was_delete: bool = False\n</code></pre> <p>Indicate if last operation was a delete.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys.typed","title":"typed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>typed: list[TypedKey] = Field(default_factory=list)\n</code></pre> <p>Only tracks non-deleted typed keys.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys.typed_all","title":"typed_all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>typed_all: list[TypedKey] = Field(default_factory=list)\n</code></pre> <p>Append-only list of typed keys.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.Keys.store","title":"store","text":"<pre><code>store(*, key, is_delete)\n</code></pre> <p>Store a new typed key.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>@beartype\ndef store(self, *, key: TypedKey, is_delete: bool) -&gt; None:\n\"\"\"Store a new typed key.\"\"\"\nself.typed_all.append(key)\nself.last_was_delete = is_delete\nif not is_delete:\nself.typed.append(key)\nelif self.typed:\nself.typed = self.typed[:-1]\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.TypedKey","title":"TypedKey","text":"<p>         Bases: <code>ExpectedKey</code></p> <p>Typed Key.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>class TypedKey(ExpectedKey):\n\"\"\"Typed Key.\"\"\"\nexpected: ExpectedKey | None\n\"\"\"Store the expected key when typed and expected become out-of-sync.\"\"\"\n@property\ndef was_correct(self) -&gt; bool:\n\"\"\"If typed key matches expected.\"\"\"\nreturn self.expected is not None and self.text == self.expected.text\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.TypedKey-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.TypedKey.expected","title":"expected  <code>instance-attribute</code>","text":"<pre><code>expected: ExpectedKey | None\n</code></pre> <p>Store the expected key when typed and expected become out-of-sync.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.TypedKey.was_correct","title":"was_correct  <code>property</code>","text":"<pre><code>was_correct: bool\n</code></pre> <p>If typed key matches expected.</p>"},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/typing/#tui_typer_tutor.core.typing.on_keypress","title":"on_keypress","text":"<pre><code>on_keypress(textual, keys)\n</code></pre> <p>Process a key press.</p> Source code in <code>tui_typer_tutor/core/typing.py</code> <pre><code>@beartype\ndef on_keypress(textual: str, keys: Keys) -&gt; None:\n\"\"\"Process a key press.\"\"\"\nis_delete = textual == BACKSPACE\nif not is_delete and len(keys.typed) == len(keys.expected):\nraise AtEndOfExpectedError\nexpected = None if is_delete else keys.expected[len(keys.typed)]\nkey = TypedKey(textual=textual, expected=expected)\nkeys.store(key=key, is_delete=is_delete)\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/uninstall/","title":"uninstall","text":"<p>Uninstall files managed by <code>ttt</code>.</p>"},{"location":"reference/tui_typer_tutor/core/uninstall/#tui_typer_tutor.core.uninstall-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/core/uninstall/#tui_typer_tutor.core.uninstall.get_cache_dir","title":"get_cache_dir","text":"<pre><code>get_cache_dir()\n</code></pre> <p>Application cache directory.</p> Source code in <code>tui_typer_tutor/core/uninstall.py</code> <pre><code>@beartype\ndef get_cache_dir() -&gt; Path:\n\"\"\"Application cache directory.\"\"\"\nreturn Path(platformdirs.user_cache_dir(APP_NAME))\n</code></pre>"},{"location":"reference/tui_typer_tutor/core/uninstall/#tui_typer_tutor.core.uninstall.uninstall","title":"uninstall","text":"<pre><code>uninstall()\n</code></pre> <p>Uninstall files managed by <code>ttt</code>.</p> Source code in <code>tui_typer_tutor/core/uninstall.py</code> <pre><code>@beartype\ndef uninstall() -&gt; None:\n\"\"\"Uninstall files managed by `ttt`.\"\"\"\ncache_dir = get_cache_dir()\nif cache_dir.is_dir():\nlogger.warning('Removing cache directory', cache_dir=cache_dir)\nfor csv_file in cache_dir.glob('*.*'):\nlogger.debug('Removing', name=csv_file.name, content=csv_file.read_text())\nshutil.rmtree(cache_dir)\nlogger.warning(\n'All local files created by this tool have been removed. You can now pipx or pip uninstall this package',\n)\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/","title":"screens","text":""},{"location":"reference/tui_typer_tutor/screens/help/","title":"help","text":"<p>The help screen.</p>"},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help.Help","title":"Help","text":"<p>         Bases: <code>ModalScreen[None]</code></p> <p>Screen with the help dialog.</p> Source code in <code>tui_typer_tutor/screens/help.py</code> <pre><code>class Help(ModalScreen[None]):\n\"\"\"Screen with the help dialog.\"\"\"\nDEFAULT_CSS: ClassVar[str] = \"\"\"\n    Help {\n        align: center middle;\n    }\n    #text {\n        content-align: center middle;\n        height: 50%;\n        width: 50%;\n    }\n    \"\"\"\nBINDINGS: ClassVar[list[Binding]] = [  # type: ignore[assignment]\nBinding('escape', 'close', 'Close'),\n]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Layout.\"\"\"\nyield Markdown(_HELP_TEXT.strip(), id='text')\ndef action_close(self) -&gt; None:\n\"\"\"Close the dialog.\"\"\"\nself.dismiss()\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help.Help-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help.Help.action_close","title":"action_close","text":"<pre><code>action_close()\n</code></pre> <p>Close the dialog.</p> Source code in <code>tui_typer_tutor/screens/help.py</code> <pre><code>def action_close(self) -&gt; None:\n\"\"\"Close the dialog.\"\"\"\nself.dismiss()\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help.Help.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Layout.</p> Source code in <code>tui_typer_tutor/screens/help.py</code> <pre><code>def compose(self) -&gt; ComposeResult:\n\"\"\"Layout.\"\"\"\nyield Markdown(_HELP_TEXT.strip(), id='text')\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/help/#tui_typer_tutor.screens.help-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/screens/main/","title":"main","text":"<p>The main screen.</p>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main-attributes","title":"Attributes","text":""},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.CHAR_OFFSET","title":"CHAR_OFFSET  <code>module-attribute</code>","text":"<pre><code>CHAR_OFFSET = math.floor(0.4 * MAX_CHARS)\n</code></pre> <p>Offset to keep the next characters visible.</p>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.MAX_CHARS","title":"MAX_CHARS  <code>module-attribute</code>","text":"<pre><code>MAX_CHARS = math.floor(0.8 * get_terminal_size()[0])\n</code></pre> <p>Determine maximum characters that can fit in 80% of the terminal width.</p>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main-classes","title":"Classes","text":""},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main","title":"Main","text":"<p>         Bases: <code>Screen[None]</code></p> <p>The main screen for the application.</p> Source code in <code>tui_typer_tutor/screens/main.py</code> <pre><code>class Main(Screen[None]):\n\"\"\"The main screen for the application.\"\"\"\nDEFAULT_CSS: ClassVar[str] = \"\"\"\n    Screen {\n        background: #1b2b34;\n    }\n    #left-pad {\n        width: 10%;\n    }\n    #content {\n        width: 80%;\n        align: center middle;\n    }\n    .tutor-container {\n        content-align-horizontal: left;\n        height: 2;\n    }\n    #text-container {\n        color: #7e8993;\n    }\n    #typed-container .error {\n        color: #ec5f67;\n    }\n    #typed-container .success {\n        color: #99c794;\n    }\n    #typed-unknown {\n        color: #b69855;\n    }\n    \"\"\"\nBINDINGS: ClassVar[list[Binding]] = [  # type: ignore[assignment]\nBinding('ctrl+q', 'save_and_quit', 'Save and Quit'),\n]\nkeys: Keys\nmetrics: SessionMetrics\nwidth: int = 0\ndef action_save_and_quit(self) -&gt; None:\n\"\"\"Save and quit.\"\"\"\nappend_csv(self.metrics.end_session(self.keys))\n# TODO: Print out or display a success message on completion!\nsys.exit(0)\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Layout.\"\"\"\nyield Header()\nwith Horizontal():\nyield Vertical(id='left-pad')\n# FYI: ^^ couldn't get 'center' alignment to work\nwith Vertical(id='content'):\nyield Horizontal(id='text-container', classes='tutor-container')\nyield Horizontal(id='typed-container', classes='tutor-container')\nyield Label(id='typed-unknown', classes='warning')\nyield Footer()\ndef on_mount(self) -&gt; None:\n\"\"\"On widget mount.\"\"\"\n# TODO: Support more customization\nseed_file = get_config().seed_file\nself.keys = Keys(expected=load_seed_data(seed_text=seed_file.read_text()))\nself.metrics = SessionMetrics.from_filename(filename=seed_file.name)\ncont = self.query_one('#text-container', Horizontal)\nfor key in self.keys.expected:  # FYI: Mounts all expected keys and crops\ncont.mount(Label(key.text, classes='text'))\n@beartype\ndef on_key(self, event: Key) -&gt; None:  # noqa: CAC001\n\"\"\"Capture all key presses and show in the typed input.\"\"\"\nif event.key in {'ctrl+q', 'ctrl+backslash'}:\nreturn  # ignore bound keys\ntry:\non_keypress(event.key, self.keys)\nexcept AtEndOfExpectedError:\nself.action_save_and_quit()\nif self.keys.last_was_delete:\nif self.width:\nself.width -= 1\nwith suppress(NoMatches):\nself.query('Label.typed').last().remove()\nself.query_one('#typed-unknown', Label).update('')\nelse:\nself.width += 1\ncursor_width = MAX_CHARS - CHAR_OFFSET\nif self.width &gt;= cursor_width:\nself.query('Label.typed').first().remove()\nself.query('Label.text').first().remove()\n# Choose the class\ncolor_class = 'success'\ndisplay_text = self.keys.typed[-1].text\nif not self.keys.typed[-1].was_correct:\ncolor_class = 'error'\n# Ensure that invisible characters are displayed\ndisplay_text = display_text.strip() or '\u2588'\ntyped_label = Label(display_text, classes=f'typed {color_class}')\nself.query_one('#typed-container', Horizontal).mount(typed_label)\ntextual_unknown = event.key if display_text == UNKNOWN else ''\nself.query_one('#typed-unknown', Label).update(textual_unknown)\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main-functions","title":"Functions","text":""},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main.action_save_and_quit","title":"action_save_and_quit","text":"<pre><code>action_save_and_quit()\n</code></pre> <p>Save and quit.</p> Source code in <code>tui_typer_tutor/screens/main.py</code> <pre><code>def action_save_and_quit(self) -&gt; None:\n\"\"\"Save and quit.\"\"\"\nappend_csv(self.metrics.end_session(self.keys))\n# TODO: Print out or display a success message on completion!\nsys.exit(0)\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Layout.</p> Source code in <code>tui_typer_tutor/screens/main.py</code> <pre><code>def compose(self) -&gt; ComposeResult:\n\"\"\"Layout.\"\"\"\nyield Header()\nwith Horizontal():\nyield Vertical(id='left-pad')\n# FYI: ^^ couldn't get 'center' alignment to work\nwith Vertical(id='content'):\nyield Horizontal(id='text-container', classes='tutor-container')\nyield Horizontal(id='typed-container', classes='tutor-container')\nyield Label(id='typed-unknown', classes='warning')\nyield Footer()\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main.on_key","title":"on_key","text":"<pre><code>on_key(event)\n</code></pre> <p>Capture all key presses and show in the typed input.</p> Source code in <code>tui_typer_tutor/screens/main.py</code> <pre><code>@beartype\ndef on_key(self, event: Key) -&gt; None:  # noqa: CAC001\n\"\"\"Capture all key presses and show in the typed input.\"\"\"\nif event.key in {'ctrl+q', 'ctrl+backslash'}:\nreturn  # ignore bound keys\ntry:\non_keypress(event.key, self.keys)\nexcept AtEndOfExpectedError:\nself.action_save_and_quit()\nif self.keys.last_was_delete:\nif self.width:\nself.width -= 1\nwith suppress(NoMatches):\nself.query('Label.typed').last().remove()\nself.query_one('#typed-unknown', Label).update('')\nelse:\nself.width += 1\ncursor_width = MAX_CHARS - CHAR_OFFSET\nif self.width &gt;= cursor_width:\nself.query('Label.typed').first().remove()\nself.query('Label.text').first().remove()\n# Choose the class\ncolor_class = 'success'\ndisplay_text = self.keys.typed[-1].text\nif not self.keys.typed[-1].was_correct:\ncolor_class = 'error'\n# Ensure that invisible characters are displayed\ndisplay_text = display_text.strip() or '\u2588'\ntyped_label = Label(display_text, classes=f'typed {color_class}')\nself.query_one('#typed-container', Horizontal).mount(typed_label)\ntextual_unknown = event.key if display_text == UNKNOWN else ''\nself.query_one('#typed-unknown', Label).update(textual_unknown)\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main.Main.on_mount","title":"on_mount","text":"<pre><code>on_mount()\n</code></pre> <p>On widget mount.</p> Source code in <code>tui_typer_tutor/screens/main.py</code> <pre><code>def on_mount(self) -&gt; None:\n\"\"\"On widget mount.\"\"\"\n# TODO: Support more customization\nseed_file = get_config().seed_file\nself.keys = Keys(expected=load_seed_data(seed_text=seed_file.read_text()))\nself.metrics = SessionMetrics.from_filename(filename=seed_file.name)\ncont = self.query_one('#text-container', Horizontal)\nfor key in self.keys.expected:  # FYI: Mounts all expected keys and crops\ncont.mount(Label(key.text, classes='text'))\n</code></pre>"},{"location":"reference/tui_typer_tutor/screens/main/#tui_typer_tutor.screens.main-functions","title":"Functions","text":""}]}